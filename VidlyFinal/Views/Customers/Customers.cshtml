@model IEnumerable<VidlyExercice1.ViewModels.Customer>
@*
    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@

@{
    ViewBag.Title = "Customers";
}

<h2>Customers</h2>

<button class="btn btn-primary" onclick="location.href='@Url.Action("New", "Customers")'">Add Customer</button>
<br />
<br />

@*@if (!Model.Any())
{
    <text>We don't have any customers yet</text>
}*@
@*else
{*@
    <table id="customers" class="table table-bordered">
        <thead>
            <tr>
                <th>Customers</th>
                <th>Membership Type</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @* below not usefull as datatable content to be rendered from Jquery DataTable from ajax request to our API *@
            @*@foreach (var customer in Model)
            {
                <tr>
                    <td>@Html.ActionLink(@customer.Name, "Edit", "Customers", new { id = @customer.Id }, null)</td>
                    <td>@customer.MembershipType.Name</td>
                    <td>
                        <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
                    </td>
                </tr>
            }*@
        </tbody>
    </table>
@*}*@

@*
    add a section script to use Jquery Code
*@

@section scripts
{
    <script>
        $(document).ready(function () {
            //$("#customers").DataTable(); @* JQuery DataTable will get the Html records and build its own list of objects, which could cause performance issue in case of huge list *@

            @* using Ajax to build the dataTable once from our Api(directly using Json object) *@
            var table = $("#customers").DataTable({
                ajax: {
                    url: "api/customersApi",
                    dataSrc: ""                         @*not empty if we need to go through an object inside the Json main object *@
                },
                columns: [                              @* define the datatables columns based on Api Json return + render if necessary *@
                    {
                        data: "name",
                        render: function(data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>";
                        }
                    },
                    {
                        data: "name"     @* membershipType.name not natively part of our Api. Need to add prop Membership of type MembershipTypeDto to our CustomerDto + add Mapper config *@
                    },
                    {
                        data: "id",
                        render: function(data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]

            });

            $("#customers").on("click", ".js-delete", function () {
                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this customer ?",
                    function(result) {
                        if (result) {
                            $.ajax({
                                url: "/api/customersApi/" + button.attr("data-customer-id"),
                                method: "DELETE",
                                success: function() {
                                    table.row(button.parents("tr")).remove().draw();  // remove element from datatable and not just from the DOM using button.parents("tr").remove()
                                }
                            });
                        }
                    });

            });
        })
    </script>
}

